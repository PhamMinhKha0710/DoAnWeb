@{
    ViewData["Title"] = "Chat";
}

<div class="container mt-4">
    <div class="row">
        <!-- Left sidebar with conversation list -->
        <div class="col-md-4 border-right">
            <div class="d-flex flex-column h-100">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4>Conversations</h4>
                    <button id="newConversationBtn" class="btn btn-sm btn-primary">
                        <i class="fas fa-plus"></i> New
                    </button>
                </div>
                
                <div class="alert alert-info d-none" id="connectionStatusAlert">
                    <span id="connectionStatusMessage">Connecting to chat...</span>
                </div>
                
                <div id="conversationsList" class="list-group overflow-auto mb-3">
                    <div class="text-center py-4 text-muted" id="noConversationsMessage">
                        <i class="fas fa-comments fa-3x mb-3"></i>
                        <p>No conversations yet</p>
                    </div>
                    <!-- Conversation items will be added here -->
                </div>
                
                <div class="mt-auto">
                    <button id="createTestConversationBtn" class="btn btn-outline-secondary btn-sm w-100">
                        Create Test Conversation
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Right side with selected conversation -->
        <div class="col-md-8">
            <div id="noChatSelected" class="text-center py-5 h-100 d-flex flex-column justify-content-center align-items-center">
                <i class="fas fa-comments fa-5x mb-4 text-muted"></i>
                <h4 class="text-muted">Select a conversation to start chatting</h4>
                <p class="text-muted">Or create a new conversation</p>
            </div>
            
            <div id="chatContainer" class="d-none h-100 d-flex flex-column">
                <div id="chatHeader" class="p-3 border-bottom">
                    <h5 id="conversationTitle">Conversation Title</h5>
                    <small id="conversationParticipants" class="text-muted">Loading participants...</small>
                </div>
                
                <div id="messagesContainer" class="flex-grow-1 overflow-auto p-3">
                    <div class="text-center py-3 text-muted">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading messages...</p>
                    </div>
                </div>
                
                <div id="typingIndicator" class="px-3 py-1 d-none">
                    <small><em><span id="typingUser">Someone</span> is typing...</em></small>
                </div>
                
                <div id="messageForm" class="p-3 border-top">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type a message...">
                        <button id="sendMessageBtn" class="btn btn-primary">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Templates for dynamic content -->
<template id="conversationItemTemplate">
    <a href="#" class="conversation-item list-group-item list-group-item-action">
        <div class="d-flex w-100 justify-content-between">
            <h6 class="mb-1 conversation-title">Conversation Title</h6>
            <small class="text-muted conversation-time">3:34 PM</small>
        </div>
        <p class="mb-1 conversation-last-message text-truncate">Last message</p>
        <small class="conversation-participants">Participants</small>
    </a>
</template>

<template id="messageTemplate">
    <div class="message mb-3">
        <div class="message-content p-3 rounded">
            <div class="d-flex justify-content-between align-items-center mb-1">
                <strong class="message-sender">Username</strong>
                <small class="text-muted message-time">3:34 PM</small>
            </div>
            <div class="message-text">Message content</div>
        </div>
    </div>
</template>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        $(document).ready(function() {
            // Get the current user's ID
            let currentUserId;
            
            // The currently selected conversation
            let selectedConversationId = null;
            
            // SignalR connection
            let connection;
            
            // Function to initialize the connection to SignalR
            function initializeSignalR() {
                // Create the connection
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .withAutomaticReconnect()
                    .build();
                
                // Connection status handling
                showConnectionStatus("Connecting to chat...", "info");
                
                // When the connection is closed
                connection.onclose(function() {
                    showConnectionStatus("Disconnected from chat. Trying to reconnect...", "warning");
                });
                
                // When the connection is reconnecting
                connection.onreconnecting(function() {
                    showConnectionStatus("Reconnecting to chat...", "warning");
                });
                
                // When the connection is reconnected
                connection.onreconnected(function() {
                    showConnectionStatus("Connected to chat!", "success");
                    
                    // Rejoin the conversation if one was selected
                    if (selectedConversationId) {
                        joinConversation(selectedConversationId);
                    }
                    
                    // Hide the status after a delay
                    setTimeout(function() {
                        hideConnectionStatus();
                    }, 3000);
                });
                
                // Handle receiving messages
                connection.on("ReceiveMessage", function(message) {
                    if (selectedConversationId && message.conversationId === selectedConversationId) {
                        addMessageToUI(message);
                        
                        // Mark message as read if it's not from current user
                        if (message.senderId !== currentUserId) {
                            markMessageAsRead(message.messageId);
                        }
                    }
                    
                    // Update conversation list to show latest message
                    loadConversations();
                });
                
                // Handle user typing events
                connection.on("UserTyping", function(data) {
                    if (selectedConversationId && data.conversationId === selectedConversationId) {
                        showTypingIndicator(data.username);
                    }
                });
                
                // Handle new conversation events
                connection.on("NewConversation", function(data) {
                    loadConversations();
                });
                
                // Start the connection
                connection.start()
                    .then(function() {
                        showConnectionStatus("Connected to chat!", "success");
                        
                        // Hide the status after a delay
                        setTimeout(function() {
                            hideConnectionStatus();
                        }, 3000);
                        
                        // Load conversations after connection is established
                        loadConversations();
                    })
                    .catch(function(err) {
                        showConnectionStatus("Error connecting to chat: " + err.toString(), "danger");
                        console.error(err.toString());
                    });
            }
            
            // Get the current user's ID
            function getCurrentUser() {
                $.ajax({
                    url: "/api/current-user-info",
                    method: "GET",
                    success: function(response) {
                        if (response.success) {
                            currentUserId = response.userId;
                            initializeSignalR();
                        } else {
                            showConnectionStatus("Error: You must be logged in to use chat", "danger");
                        }
                    },
                    error: function() {
                        showConnectionStatus("Error: Could not get current user", "danger");
                    }
                });
            }
            
            // Load conversations for the current user
            function loadConversations() {
                $.ajax({
                    url: "/api/conversations",
                    method: "GET",
                    success: function(response) {
                        if (response.success) {
                            renderConversationsList(response.conversations);
                        } else {
                            console.error("Error loading conversations:", response.message);
                        }
                    },
                    error: function(xhr) {
                        console.error("Error loading conversations:", xhr.statusText);
                    }
                });
            }
            
            // Render the conversations list
            function renderConversationsList(conversations) {
                const $list = $("#conversationsList");
                const $noConversationsMessage = $("#noConversationsMessage");
                
                $list.empty();
                
                if (conversations.length === 0) {
                    $noConversationsMessage.removeClass("d-none");
                    return;
                }
                
                $noConversationsMessage.addClass("d-none");
                
                conversations.forEach(function(conversation) {
                    const $item = $($("#conversationItemTemplate").html());
                    
                    $item.attr("data-conversation-id", conversation.id);
                    $item.find(".conversation-title").text(conversation.title);
                    
                    // Format time
                    const lastActivityTime = new Date(conversation.lastActivityAt);
                    $item.find(".conversation-time").text(formatTime(lastActivityTime));
                    
                    // Show last message if available
                    if (conversation.lastMessage) {
                        $item.find(".conversation-last-message").text(conversation.lastMessage.content);
                    } else {
                        $item.find(".conversation-last-message").text("No messages yet");
                    }
                    
                    // Show participants
                    const participantNames = conversation.participants
                        .filter(p => p.userId !== currentUserId)
                        .map(p => p.username);
                    
                    if (participantNames.length > 0) {
                        $item.find(".conversation-participants").text(participantNames.join(", "));
                    } else {
                        $item.find(".conversation-participants").text("Just you");
                    }
                    
                    // Highlight if this is the selected conversation
                    if (selectedConversationId === conversation.id) {
                        $item.addClass("active");
                    }
                    
                    $list.append($item);
                });
                
                // Add click event to conversation items
                $list.find(".conversation-item").click(function(e) {
                    e.preventDefault();
                    const conversationId = $(this).data("conversation-id");
                    selectConversation(conversationId);
                });
            }
            
            // Select a conversation
            function selectConversation(conversationId) {
                if (selectedConversationId === conversationId) {
                    return; // Already selected
                }
                
                selectedConversationId = conversationId;
                
                // Update UI to show the selected conversation
                $("#conversationsList .conversation-item").removeClass("active");
                $(`[data-conversation-id="${conversationId}"]`).addClass("active");
                
                // Show chat container
                $("#noChatSelected").addClass("d-none");
                $("#chatContainer").removeClass("d-none");
                
                // Join the conversation in SignalR
                joinConversation(conversationId);
                
                // Load messages for this conversation
                loadMessages(conversationId);
            }
            
            // Join a conversation via SignalR
            function joinConversation(conversationId) {
                if (connection && connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke("JoinConversation", conversationId)
                        .catch(function(err) {
                            console.error("Error joining conversation:", err.toString());
                        });
                }
            }
            
            // Load messages for a conversation
            function loadMessages(conversationId) {
                $.ajax({
                    url: `/api/conversations/${conversationId}/messages`,
                    method: "GET",
                    success: function(response) {
                        if (response.success) {
                            renderMessages(response.messages);
                            
                            // Get conversation details
                            loadConversationDetails(conversationId);
                        } else {
                            console.error("Error loading messages:", response.message);
                        }
                    },
                    error: function(xhr) {
                        console.error("Error loading messages:", xhr.statusText);
                    }
                });
            }
            
            // Load conversation details
            function loadConversationDetails(conversationId) {
                // Find the conversation in the list
                const $conversation = $(`[data-conversation-id="${conversationId}"]`);
                if ($conversation.length > 0) {
                    const title = $conversation.find(".conversation-title").text();
                    const participants = $conversation.find(".conversation-participants").text();
                    
                    $("#conversationTitle").text(title);
                    $("#conversationParticipants").text(participants);
                }
            }
            
            // Render messages in the UI
            function renderMessages(messages) {
                const $container = $("#messagesContainer");
                $container.empty();
                
                if (messages.length === 0) {
                    $container.html('<div class="text-center py-4 text-muted"><p>No messages yet</p></div>');
                    return;
                }
                
                messages.forEach(function(message) {
                    addMessageToUI(message);
                });
                
                // Scroll to the bottom
                scrollToBottom();
            }
            
            // Add a single message to the UI
            function addMessageToUI(message) {
                const $container = $("#messagesContainer");
                const $message = $($("#messageTemplate").html());
                
                // Set message content
                $message.attr("data-message-id", message.id);
                $message.find(".message-sender").text(message.senderName || "User #" + message.senderId);
                $message.find(".message-text").text(message.content);
                
                // Format time
                const sentTime = new Date(message.sentAt);
                $message.find(".message-time").text(formatTime(sentTime));
                
                // Style differently if sent by current user
                if (message.senderId === currentUserId) {
                    $message.addClass("text-end");
                    $message.find(".message-content").addClass("bg-primary text-white");
                } else {
                    $message.find(".message-content").addClass("bg-light");
                }
                
                $container.append($message);
                scrollToBottom();
            }
            
            // Mark a message as read
            function markMessageAsRead(messageId) {
                if (connection && connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke("MarkMessageAsRead", messageId)
                        .catch(function(err) {
                            console.error("Error marking message as read:", err.toString());
                        });
                }
            }
            
            // Create a test conversation
            function createTestConversation() {
                $.ajax({
                    url: "/api/test-conversation",
                    method: "GET",
                    success: function(response) {
                        if (response.success) {
                            console.log("Test conversation created:", response);
                            loadConversations();
                            selectConversation(response.conversation.id);
                        } else {
                            console.error("Error creating test conversation:", response.message);
                        }
                    },
                    error: function(xhr) {
                        console.error("Error creating test conversation:", xhr.statusText);
                    }
                });
            }
            
            // Send a message
            function sendMessage() {
                if (!selectedConversationId) {
                    return;
                }
                
                const content = $("#messageInput").val().trim();
                if (!content) {
                    return;
                }
                
                if (connection && connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke("SendMessageToConversation", selectedConversationId, content)
                        .then(function() {
                            $("#messageInput").val("");
                        })
                        .catch(function(err) {
                            console.error("Error sending message:", err.toString());
                            showConnectionStatus("Error sending message: " + err.toString(), "danger");
                        });
                } else {
                    showConnectionStatus("Cannot send message: Not connected to chat", "warning");
                }
            }
            
            // User is typing
            function notifyUserTyping() {
                if (!selectedConversationId) {
                    return;
                }
                
                if (connection && connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke("UserTyping", selectedConversationId)
                        .catch(function(err) {
                            console.error("Error sending typing notification:", err.toString());
                        });
                }
            }
            
            // Show typing indicator
            function showTypingIndicator(username) {
                $("#typingUser").text(username);
                $("#typingIndicator").removeClass("d-none");
                
                // Hide after 3 seconds
                clearTimeout(window.typingTimeout);
                window.typingTimeout = setTimeout(function() {
                    $("#typingIndicator").addClass("d-none");
                }, 3000);
            }
            
            // Show connection status
            function showConnectionStatus(message, type) {
                const $alert = $("#connectionStatusAlert");
                $("#connectionStatusMessage").text(message);
                
                $alert.removeClass("d-none alert-info alert-warning alert-danger alert-success");
                $alert.addClass(`alert-${type}`);
            }
            
            // Hide connection status
            function hideConnectionStatus() {
                $("#connectionStatusAlert").addClass("d-none");
            }
            
            // Format time for display
            function formatTime(date) {
                return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }
            
            // Scroll messages container to bottom
            function scrollToBottom() {
                const $container = $("#messagesContainer");
                $container.scrollTop($container[0].scrollHeight);
            }
            
            // Event handlers
            $("#sendMessageBtn").click(function() {
                sendMessage();
            });
            
            $("#messageInput").keypress(function(e) {
                if (e.which === 13) { // Enter key
                    sendMessage();
                    return false;
                }
            });
            
            // Typing indicator
            let typingTimer;
            $("#messageInput").on("input", function() {
                clearTimeout(typingTimer);
                typingTimer = setTimeout(notifyUserTyping, 500);
            });
            
            // Create test conversation button
            $("#createTestConversationBtn").click(function() {
                createTestConversation();
            });
            
            // Initialize
            getCurrentUser();
        });
    </script>
} 