@model IEnumerable<DoAnWeb.Models.User>

@{
    ViewData["Title"] = "Users";
}

@section Styles {
    <link rel="stylesheet" href="~/css/users-modern.css" />

    <style>
        /* Live search specific styles */
        .users-search-container {
            position: relative;
        }

        .users-search-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: white;
            border-radius: var(--user-border-radius);
            border: 1px solid var(--user-gray-200);
            box-shadow: var(--user-shadow);
            z-index: 1000;
            max-height: 400px;
            overflow-y: auto;
            display: none;
            margin-top: 5px;
        }

        .users-search-dropdown.active {
            display: block;
            animation: fadeIn 0.2s ease-out;
        }

        .users-search-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--user-gray-200);
            transition: var(--user-transition);
            text-decoration: none;
            color: var(--user-gray-800);
        }

        .users-search-item:last-child {
            border-bottom: none;
        }

        .users-search-item:hover {
            background-color: var(--user-gray-100);
        }

        .users-search-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 1rem;
            object-fit: cover;
        }

        .users-search-avatar-placeholder {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, var(--user-primary) 0%, var(--user-secondary) 100%);
            color: white;
            font-weight: bold;
            font-size: 1rem;
        }

        .users-search-info {
            flex: 1;
        }

        .users-search-name {
            font-weight: 600;
            margin-bottom: 0.25rem;
            line-height: 1.2;
        }

        .users-search-stats {
            display: flex;
            font-size: 0.8rem;
            color: var(--user-gray-600);
        }

        .users-search-stat {
            margin-right: 1rem;
            display: flex;
            align-items: center;
        }

        .users-search-stat i {
            margin-right: 0.25rem;
            color: var(--user-primary);
        }

        .users-search-footer {
            padding: 0.75rem 1rem;
            text-align: center;
            border-top: 1px solid var(--user-gray-200);
            font-size: 0.9rem;
        }

        .users-search-loading {
            padding: 1rem;
            text-align: center;
            color: var(--user-gray-600);
        }
    </style>
}

<div class="users-container">
    <div class="users-header">
        <div class="users-header-content">
            <h1 class="users-title">Community Members</h1>
            <p class="users-subtitle">Connect with expert developers and enthusiasts from around the world</p>
        </div>
    </div>

    <div class="users-search-container">
        <div class="row">
            <div class="col-md-6 col-lg-4 mb-3 mb-md-0">
                <form method="get" action="@Url.Action("Index", "Users")" class="d-flex search-form">
                    <input type="hidden" name="filter" value="@(ViewBag.ActiveFilter ?? "reputation")" id="filterValue" />
                    <input type="hidden" name="sort" value="@(ViewBag.ActiveSort ?? "reputation")" />
                    <input type="text" name="search" id="userSearchInput" class="users-search-input" placeholder="Search members..." value="@ViewBag.SearchTerm" autocomplete="off">
                    <button type="submit" class="users-search-button ms-2" id="searchButton">
                        <i class="bi bi-search me-1"></i> Search
                    </button>
                </form>
                <div class="users-search-dropdown" id="searchDropdown">
                    <div class="users-search-loading" id="searchLoading">
                        <i class="bi bi-hourglass-split me-2"></i> Searching...
                    </div>
                    <div id="searchResults"></div>
                    <div class="users-search-footer">
                        <span id="searchCount">0</span> results found. Press Enter to see all results.
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-8">
                <div class="users-filter-buttons">
                    <a href="@Url.Action("Index", "Users", new { filter = "reputation", sort = ViewBag.ActiveSort ?? "reputation", search = ViewBag.SearchTerm })" 
                       class="users-filter-button @(ViewBag.ActiveFilter == "reputation" ? "active" : "")" data-filter="reputation">
                        <i class="bi bi-award me-1"></i> Reputation
                    </a>
                    <a href="@Url.Action("Index", "Users", new { filter = "newusers", sort = ViewBag.ActiveSort ?? "reputation", search = ViewBag.SearchTerm })" 
                       class="users-filter-button @(ViewBag.ActiveFilter == "newusers" ? "active" : "")" data-filter="newusers">
                        <i class="bi bi-person-plus me-1"></i> New users
                    </a>
                    <a href="@Url.Action("Index", "Users", new { filter = "voters", sort = ViewBag.ActiveSort ?? "reputation", search = ViewBag.SearchTerm })" 
                       class="users-filter-button @(ViewBag.ActiveFilter == "voters" ? "active" : "")" data-filter="voters">
                        <i class="bi bi-hand-thumbs-up me-1"></i> Voters
                    </a>
                    <a href="@Url.Action("Index", "Users", new { filter = "editors", sort = ViewBag.ActiveSort ?? "reputation", search = ViewBag.SearchTerm })" 
                       class="users-filter-button @(ViewBag.ActiveFilter == "editors" ? "active" : "")" data-filter="editors">
                        <i class="bi bi-pencil-square me-1"></i> Editors
                    </a>
                    <a href="@Url.Action("Index", "Users", new { filter = "moderators", sort = ViewBag.ActiveSort ?? "reputation", search = ViewBag.SearchTerm })" 
                       class="users-filter-button @(ViewBag.ActiveFilter == "moderators" ? "active" : "")" data-filter="moderators">
                        <i class="bi bi-shield-check me-1"></i> Moderators
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="users-results-info">
        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
        {
            <div class="users-search-results">
                <i class="bi bi-search me-1"></i> Search results for "<strong>@ViewBag.SearchTerm</strong>"
                <a href="@Url.Action("Index", "Users", new { filter = ViewBag.ActiveFilter, sort = ViewBag.ActiveSort })" 
                   class="users-search-clear">
                    <i class="bi bi-x-circle"></i> Clear search
                </a>
            </div>
        }
        <div class="users-count">
            <i class="bi bi-people me-1"></i> Showing <strong>@(ViewBag.UserCount ?? Model.Count())</strong> members
        </div>
    </div>

    <div class="users-sort-tabs">
        <a href="@Url.Action("Index", "Users", new { filter = ViewBag.ActiveFilter ?? "reputation", sort = "reputation", search = ViewBag.SearchTerm })" 
           class="users-sort-tab @(ViewBag.ActiveSort == "reputation" ? "active" : "")">Reputation</a>
        <a href="@Url.Action("Index", "Users", new { filter = ViewBag.ActiveFilter ?? "reputation", sort = "name", search = ViewBag.SearchTerm })" 
           class="users-sort-tab @(ViewBag.ActiveSort == "name" ? "active" : "")">Name</a>
        <a href="@Url.Action("Index", "Users", new { filter = ViewBag.ActiveFilter ?? "reputation", sort = "creation", search = ViewBag.SearchTerm })" 
           class="users-sort-tab @(ViewBag.ActiveSort == "creation" ? "active" : "")">Creation Date</a>
        <a href="@Url.Action("Index", "Users", new { filter = ViewBag.ActiveFilter ?? "reputation", sort = "votes", search = ViewBag.SearchTerm })" 
           class="users-sort-tab @(ViewBag.ActiveSort == "votes" ? "active" : "")">Votes</a>
    </div>
    
    @if (!Model.Any())
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i> No users found.
            @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
            {
                <span>Try a different search term or <a href="@Url.Action("Index", "Users")">clear all filters</a>.</span>
            }
        </div>
    }
    else
    {
        <div class="users-grid">
            @foreach (var user in Model)
            {
                <div class="user-card">
                    <div class="user-card-header">
                        @{
                            var initials = !string.IsNullOrEmpty(user.DisplayName) 
                                ? string.Join("", user.DisplayName.Split(' ').Where(x => !string.IsNullOrEmpty(x)).Select(x => x[0])) 
                                : "U";
                        }
                        
                        @if (string.IsNullOrEmpty(user.AvatarUrl))
                        {
                            <div class="user-avatar-placeholder">
                                @initials
                            </div>
                        }
                        else
                        {
                            <img src="@user.AvatarUrl" class="user-avatar" alt="@user.DisplayName">
                        }
                        
                        <div class="user-details">
                            <h3 class="user-name">
                                <a asp-controller="Users" asp-action="Details" asp-route-id="@user.UserId">@user.DisplayName</a>
                            </h3>
                            <p class="user-username">@@@user.Username</p>
                        </div>
                    </div>
                    <div class="user-card-body">
                        <div class="user-stats">
                            <div class="user-stat">
                                <div class="user-stat-value user-reputation" data-user-id="@user.UserId">@user.Reputation</div>
                                <div class="user-stat-label">reputation</div>
                            </div>
                            <div class="user-stat">
                                <div class="user-stat-value">@user.Questions.Count</div>
                                <div class="user-stat-label">questions</div>
                            </div>
                            <div class="user-stat">
                                <div class="user-stat-value">@user.Answers.Count</div>
                                <div class="user-stat-label">answers</div>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(user.Bio))
                        {
                            <p class="user-bio">@(user.Bio)</p>
                        }
                    </div>
                    <div class="user-card-footer">
                        <i class="bi bi-calendar-event me-2"></i> Member since @(user.CreatedDate?.ToString("MMM yyyy") ?? "unknown")
                    </div>
                </div>
            }
        </div>
        
        <div class="users-pagination">
            <ul class="users-pagination-list">
                <li class="users-pagination-item disabled">
                    <a href="#"><i class="bi bi-chevron-left me-1"></i> Previous</a>
                </li>
                <li class="users-pagination-item active">
                    <a href="#">1</a>
                </li>
                <li class="users-pagination-item">
                    <a href="#">2</a>
                </li>
                <li class="users-pagination-item">
                    <a href="#">3</a>
                </li>
                <li class="users-pagination-item">
                    <a href="#">Next <i class="bi bi-chevron-right ms-1"></i></a>
                </li>
            </ul>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add subtle animations for user cards
            const userCards = document.querySelectorAll('.user-card');
            userCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                card.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-out';
                
                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100 + (index * 50));
            });
            
            // Live search functionality
            const searchInput = document.getElementById('userSearchInput');
            const searchResults = document.getElementById('searchResults');
            const searchDropdown = document.getElementById('searchDropdown');
            const searchLoading = document.getElementById('searchLoading');
            const searchCount = document.getElementById('searchCount');
            const filterValue = document.getElementById('filterValue');
            let searchTimeout;
            let currentSearchTerm = '';
            
            // Function to perform search
            function performSearch(query) {
                if (query === currentSearchTerm) return;
                currentSearchTerm = query;
                
                if (query.trim().length < 2) {
                    searchDropdown.classList.remove('active');
                    return;
                }
                
                searchDropdown.classList.add('active');
                searchLoading.style.display = 'block';
                searchResults.innerHTML = '';
                
                clearTimeout(searchTimeout);
                
                searchTimeout = setTimeout(() => {
                    fetch(`/Users/SearchUsers?query=${encodeURIComponent(query)}&filter=${filterValue.value}`)
                        .then(response => response.json())
                        .then(data => {
                            searchLoading.style.display = 'none';
                            
                            if (data.success && data.users.length > 0) {
                                searchCount.textContent = data.totalCount;
                                
                                const resultsHtml = data.users.map(user => {
                                    const initials = user.displayName ? 
                                        user.displayName.split(' ')
                                            .filter(x => x)
                                            .map(x => x[0])
                                            .join('') : 'U';
                                    
                                    const avatar = user.avatar ? 
                                        `<img src="${user.avatar}" class="users-search-avatar" alt="${user.displayName}">` :
                                        `<div class="users-search-avatar-placeholder">${initials}</div>`;
                                    
                                    return `
                                        <a href="/Users/Details/${user.userId}" class="users-search-item">
                                            ${avatar}
                                            <div class="users-search-info">
                                                <div class="users-search-name">${user.displayName}</div>
                                                <div class="users-search-stats">
                                                    <div class="users-search-stat">
                                                        <i class="bi bi-award"></i> ${user.reputation}
                                                    </div>
                                                    <div class="users-search-stat">
                                                        <i class="bi bi-calendar"></i> ${user.memberSince}
                                                    </div>
                                                </div>
                                            </div>
                                        </a>
                                    `;
                                }).join('');
                                
                                searchResults.innerHTML = resultsHtml;
                            } else {
                                searchCount.textContent = '0';
                                searchResults.innerHTML = `
                                    <div class="p-3 text-center text-muted">
                                        <i class="bi bi-person-x me-2"></i> No users found matching "${query}"
                                    </div>
                                `;
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            searchLoading.style.display = 'none';
                            searchResults.innerHTML = `
                                <div class="p-3 text-center text-danger">
                                    <i class="bi bi-exclamation-triangle me-2"></i> Error searching for users
                                </div>
                            `;
                        });
                }, 300);
            }
            
            // Search input event
            searchInput.addEventListener('input', function() {
                const query = this.value.trim();
                performSearch(query);
            });
            
            // Handle Enter key
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    const form = document.querySelector('.search-form');
                    form.submit();
                    e.preventDefault();
                }
            });
            
            // Handle click outside to close dropdown
            document.addEventListener('click', function(e) {
                if (!searchInput.contains(e.target) && !searchDropdown.contains(e.target)) {
                    searchDropdown.classList.remove('active');
                }
            });
            
            // Filter buttons update the hidden filter value
            document.querySelectorAll('.users-filter-button').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    filterValue.value = this.dataset.filter;
                });
            });
        });
    </script>
}