@model DoAnWeb.Models.User

@{
    ViewData["Title"] = $"{Model.DisplayName ?? "User Profile"}";
    ViewBag.HideRightSidebar = true;
}

@section Styles {
    <link rel="stylesheet" href="~/css/users-modern.css" />
}

<div class="user-profile-container">
    <div class="user-profile-header">
        <div class="user-profile-info">
            <div class="user-profile-avatar">
                <img src="@(string.IsNullOrEmpty(Model.AvatarUrl) ? "/images/default-avatar.png" : Model.AvatarUrl)" 
                     alt="@Model.DisplayName">
                <div class="status-badge">
                    <i class="bi bi-check-lg"></i>
                </div>
            </div>
            
            <div class="user-profile-details">
                <h1 class="user-profile-name">@Model.DisplayName</h1>
                <p class="user-profile-username">@($"@{Model.Username}")</p>
                
                <div class="user-profile-badges">
                    <div class="user-profile-badge highlight">
                        <i class="bi bi-star-fill"></i> @Model.Reputation reputation
                    </div>
                    <div class="user-profile-badge">
                        <i class="bi bi-calendar-check"></i> Member since @(Model.CreatedDate?.ToString("MMM yyyy") ?? "unknown")
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Bio))
                {
                    <p class="user-profile-bio">@Model.Bio</p>
                }
            </div>
            
            <div class="user-profile-actions">
                <button class="user-profile-action-btn">
                    <i class="bi bi-person-plus"></i> Follow
                </button>
                <button class="user-profile-action-btn outline">
                    <i class="bi bi-envelope"></i> Message
                </button>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <!-- Statistics -->
        <div class="col-md-4">
            <div class="user-profile-stats-card mb-4">
                <div class="user-profile-stats-header">
                    <h2 class="user-profile-stats-title">
                        <i class="bi bi-bar-chart-line"></i> Statistics
                    </h2>
                </div>
                <div class="user-profile-stats-grid">
                    @foreach (var stat in new[]
                    {
                        new { Label = "Questions", Count = Model.Questions?.Count ?? 0, Icon = "bi-question-circle" },
                        new { Label = "Answers", Count = Model.Answers?.Count ?? 0, Icon = "bi-chat-left-text" },
                        new { Label = "Repos", Count = Model.Repositories?.Count ?? 0, Icon = "bi-code-square" },
                        new { Label = "Comments", Count = Model.Comments?.Count ?? 0, Icon = "bi-chat-dots" }
                    })
                    {
                        <div class="user-profile-stat-item">
                            <div class="user-profile-stat-value">@stat.Count</div>
                            <div class="user-profile-stat-label">@stat.Label</div>
                        </div>
                    }
                </div>
            </div>

            <!-- Tags -->
            <div class="user-profile-stats-card">
                <div class="user-profile-stats-header">
                    <h2 class="user-profile-stats-title">
                        <i class="bi bi-tags"></i> Top Tags
                    </h2>
                </div>
                <div class="user-profile-tags">
                    @foreach (var tagPair in Model.TopTags())
                    {
                        <div class="user-profile-tag">
                            @tagPair.Key 
                            <span class="user-profile-tag-count">@tagPair.Value</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="col-md-8">
            <div class="user-profile-activity">
                <div class="user-profile-activity-header">
                    <h2 class="user-profile-activity-title">
                        <i class="bi bi-clock-history"></i> Recent Activity
                    </h2>
                </div>
                
                @if ((Model.Questions?.Any() ?? false) || (Model.Answers?.Any() ?? false))
                {
                    <ul class="user-profile-activity-list">
                        @foreach (var question in Model.Questions?.OrderByDescending(q => q.CreatedDate).Take(5) ?? new List<Question>())
                        {
                            <li class="user-profile-activity-item">
                                <div class="user-profile-activity-content">
                                    <div class="user-profile-activity-icon">
                                        <i class="bi bi-question-lg"></i>
                                    </div>
                                    <div class="user-profile-activity-info">
                                        <h3 class="user-profile-activity-title">
                                            <a href="@Url.Action("Details", "Questions", new { id = question.QuestionId })">
                                                @question.Title
                                            </a>
                                        </h3>
                                        <p class="user-profile-activity-date">
                                            <i class="bi bi-calendar3 me-1"></i> @(question.CreatedDate?.ToString("MMM dd, yyyy") ?? "unknown")
                                        </p>
                                    </div>
                                </div>
                            </li>
                        }
                        
                        @foreach (var answer in Model.Answers?.OrderByDescending(a => a.CreatedDate).Take(3) ?? new List<Answer>())
                        {
                            <li class="user-profile-activity-item">
                                <div class="user-profile-activity-content">
                                    <div class="user-profile-activity-icon">
                                        <i class="bi bi-chat-left-text"></i>
                                    </div>
                                    <div class="user-profile-activity-info">
                                        <h3 class="user-profile-activity-title">
                                            <a href="@Url.Action("Details", "Questions", new { id = answer.Question?.QuestionId })#answer-@answer.AnswerId">
                                                Answered: @answer.Question?.Title
                                            </a>
                                        </h3>
                                        <p class="user-profile-activity-date">
                                            <i class="bi bi-calendar3 me-1"></i> @(answer.CreatedDate?.ToString("MMM dd, yyyy") ?? "unknown")
                                        </p>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="user-profile-activity-empty">
                        <i class="bi bi-inbox"></i>
                        <p class="user-profile-activity-empty-text">No recent activity found.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add subtle animations
            const animateElements = [
                '.user-profile-info',
                '.user-profile-stats-card',
                '.user-profile-activity'
            ];
            
            animateElements.forEach((selector, index) => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    el.style.opacity = '0';
                    el.style.transform = 'translateY(20px)';
                    el.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-out';
                    
                    setTimeout(() => {
                        el.style.opacity = '1';
                        el.style.transform = 'translateY(0)';
                    }, 100 + (index * 150));
                });
            });
            
            // Add hover effects for stat items
            const statItems = document.querySelectorAll('.user-profile-stat-item');
            statItems.forEach(item => {
                item.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-5px)';
                });
                
                item.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        });
    </script>
}
