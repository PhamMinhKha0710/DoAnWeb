@model IEnumerable<DoAnWeb.Models.Tag>

@{
    ViewData["Title"] = "Explore Tags";
    var searchQuery = ViewBag.SearchQuery as string;
    var searchResultCount = ViewBag.SearchResultCount ?? Model.Count();
}

@section Styles {
    <link rel="stylesheet" href="~/css/tags-modern.css" />
    <style>
        /* Inline styles to ensure tag cards are displayed correctly */
        .tags-grid-container {
            display: grid !important;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)) !important;
            gap: 1.5rem !important;
            width: 100% !important;
        }
        
        .tag-card {
            position: relative !important;
            background: white !important;
            border-radius: 16px !important;
            overflow: hidden !important;
            transition: all 0.3s ease !important;
            height: 100% !important;
            display: flex !important;
            flex-direction: column !important;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.05) !important;
            border: 1px solid rgba(108, 92, 231, 0.05) !important;
            margin-bottom: 20px !important;
        }

        .tag-card::before {
            content: '' !important;
            position: absolute !important;
            top: 0 !important;
            left: 0 !important;
            right: 0 !important;
            height: 6px !important;
            background: linear-gradient(to right, var(--tag-primary), var(--tag-secondary)) !important;
            z-index: 1 !important;
        }

        .tag-card-body {
            padding: 1.75rem !important;
            flex: 1 !important;
            display: flex !important;
            flex-direction: column !important;
            position: relative !important;
        }

        .tag-card-header {
            display: flex !important;
            align-items: flex-start !important;
            margin-bottom: 1.25rem !important;
            position: relative !important;
        }

        .tag-badge {
            display: inline-flex !important;
            align-items: center !important;
            font-size: 1.1rem !important;
            font-weight: 700 !important;
            color: var(--tag-primary) !important;
            text-decoration: none !important;
            padding: 0.5rem 1rem !important;
            background-color: var(--tag-primary-light) !important;
            border-radius: 50px !important;
            transition: all 0.3s ease !important;
            position: relative !important;
            overflow: hidden !important;
            z-index: 1 !important;
            box-shadow: 0 3px 10px rgba(108, 92, 231, 0.1) !important;
        }

        .tag-description {
            font-size: 0.95rem !important;
            line-height: 1.6 !important;
            flex: 1 !important;
            margin-bottom: 1.75rem !important;
            position: relative !important;
            padding: 1rem !important;
            border-radius: 12px !important;
            border-left: 3px solid rgba(142, 36, 170, 0.2) !important;
            background-color: #f8f9fa !important;
            color: #4a5568 !important;
        }

        .tag-browse-button {
            display: flex !important;
            flex-direction: column !important;
            align-items: center !important;
            justify-content: center !important;
            margin: 0.5rem auto 1.75rem !important;
            padding: 1rem !important;
            background-color: #f8f9fa !important;
            color: #4a5568 !important;
            border: 1px solid #e2e8f0 !important;
            border-radius: 12px !important;
            text-align: center !important;
            text-decoration: none !important;
            transition: all 0.3s ease !important;
            width: 80% !important;
            box-shadow: 0 3px 10px rgba(108, 92, 231, 0.1) !important;
        }

        .tag-browse-button i {
            font-size: 1.5rem !important;
            margin-bottom: 0.5rem !important;
            color: #6c757d !important;
        }

        .tag-browse-count {
            font-size: 0.8rem !important;
            opacity: 0.8 !important;
        }

        .tag-card-footer {
            display: flex !important;
            justify-content: space-between !important;
            padding-top: 1.25rem !important;
            border-top: 1px solid #dee2e6 !important;
            margin-top: auto !important;
        }

        .tag-action-link {
            display: inline-flex !important;
            align-items: center !important;
            gap: 0.5rem !important;
            padding: 0.6rem 1rem !important;
            font-size: 0.85rem !important;
            font-weight: 600 !important;
            text-decoration: none !important;
            border-radius: 10px !important;
            transition: all 0.3s ease !important;
            min-width: 110px !important;
            justify-content: center !important;
        }

        .tag-action-link.primary {
            background-color: rgba(142, 36, 170, 0.1) !important;
            color: #8e24aa !important;
            border: 1px solid rgba(108, 92, 231, 0.2) !important;
        }

        .tag-action-link:not(.primary) {
            background-color: white !important;
            color: #6c757d !important;
            border: 1px solid #dee2e6 !important;
        }

        /* Dark theme */
        html[data-theme="dark"] .tag-card {
            background: #2d3748 !important;
            border-color: rgba(108, 92, 231, 0.2) !important;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15) !important;
        }

        html[data-theme="dark"] .tag-description {
            color: #e2e8f0 !important;
            background-color: #374151 !important;
        }

        html[data-theme="dark"] .tag-badge {
            background-color: rgba(187, 134, 252, 0.1) !important;
            color: #bb86fc !important;
        }

        html[data-theme="dark"] .tag-browse-button {
            background-color: #2d3748 !important;
            color: #e2e8f0 !important;
            border-color: #4a5568 !important;
        }

        html[data-theme="dark"] .tag-browse-button i {
            color: #9ca3af !important;
        }

        html[data-theme="dark"] .tag-action-link.primary {
            background-color: rgba(187, 134, 252, 0.1) !important;
            color: #bb86fc !important;
            border-color: rgba(187, 134, 252, 0.2) !important;
        }

        html[data-theme="dark"] .tag-action-link:not(.primary) {
            background-color: #2d3748 !important;
            color: #a0aec0 !important;
            border-color: #4a5568 !important;
        }

        html[data-theme="dark"] .tag-card-footer {
            border-top-color: #4a5568 !important;
        }
    </style>
}

<div class="tags-container">
    <div class="tags-header">
        <div class="tags-header-bg">
            <div class="tags-header-content">
                <h1 class="tags-title">Explore Knowledge Areas</h1>
                <p class="tags-subtitle">Discover specialized topics to find solutions and connect with experts in your field</p>
                
                <div class="tags-search-container">
                    <i class="bi bi-search tags-search-icon"></i>
                    <input type="text" 
                           id="tag-search-input"
                           class="tags-search-box" 
                           placeholder="Find a specific tag..."
                           autocomplete="off"
                           value="@searchQuery">
                    <button id="clear-search-button" class="tags-search-clear" title="Clear search">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                
                <div class="tags-search-options">
                    <small>
                        Results update instantly as you type. 
                        <a href="#" id="toggle-server-search">Try advanced search</a>
                    </small>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Server-side search form (hidden by default) -->
    <div id="server-search-form" class="server-search-form d-none">
        <form asp-action="Search" method="get" class="mb-3">
            <div class="input-group">
                <input type="text" name="query" class="form-control server-search-input" placeholder="Advanced search..." value="@searchQuery">
                <button class="server-search-button" type="submit">
                    <i class="bi bi-search me-2"></i> Search
                </button>
            </div>
        </form>
        <small class="text-muted d-block">
            Advanced search processes on the server for more precise results with complex queries.
            <a href="#" id="back-to-client-search" class="text-decoration-underline">Return to instant search</a>
        </small>
    </div>
    
    @if (!string.IsNullOrEmpty(searchQuery))
    {
        <div class="search-results-info">
            <div>
                <strong class="search-results-query">Results for:</strong> "@searchQuery"
                <span class="search-results-count">@Model.Count()</span>
            </div>
            <a asp-action="Index" class="search-results-clear">
                <i class="bi bi-x-circle"></i> Clear results
            </a>
        </div>
    }
    
    <div class="tags-grid">
        <div id="no-search-results" class="tags-empty-state @(Model.Any() ? "d-none" : "")">
            <i class="bi bi-search tags-empty-icon"></i>
            <h4 class="tags-empty-title">No matching tags found</h4>
            <p class="tags-empty-message">Try different keywords or browse our complete tag collection</p>
        </div>
        
        <div class="tags-grid-container" id="tags-container">
            @foreach (var tag in Model)
            {
                <div class="tag-card" data-tag-id="@tag.TagId">
                    <div class="tag-card-body">
                        <div class="tag-card-header">
                            <a asp-action="Details" asp-route-id="@tag.TagId" class="tag-badge">@tag.TagName</a>
                            <span class="tag-count">
                                <i class="bi bi-hash"></i> @(tag.QuestionTags?.Count() ?? 0)
                            </span>
                        </div>
                        <p class="tag-description">@(string.IsNullOrEmpty(tag.Description) ? "No description available for this tag." : tag.Description)</p>
                        
                        <a asp-controller="Questions" asp-action="Index" asp-route-tag="@tag.TagName" class="tag-browse-button">
                            <i class="bi bi-arrow-right-circle"></i> Browse
                            <span class="tag-browse-count">@(tag.QuestionTags?.Count() ?? 0) questions</span>
                        </a>
                        
                        <div class="tag-card-footer">
                            <a asp-action="Details" asp-route-id="@tag.TagId" class="tag-action-link primary">
                                <i class="bi bi-info-circle"></i> Details
                            </a>
                            <a asp-controller="Questions" asp-action="Index" asp-route-tag="@tag.TagName" class="tag-action-link">
                                <i class="bi bi-question-circle"></i> Questions
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/tag-search.js"></script>
    <script>
        // Đảm bảo các card được hiển thị đúng khi tải trang
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Tags page loaded, fixing styling...');
            
            // Force một reflow để đảm bảo styles được áp dụng
            setTimeout(() => {
                // Phát hiện theme và áp dụng styles
                const isDarkTheme = document.documentElement.getAttribute('data-theme') === 'dark';
                console.log('Current theme:', isDarkTheme ? 'dark' : 'light');
                
                // Gọi hàm fix styling từ theme-fix.js hoặc sử dụng hàm dự phòng
                if (window.themeFixUtils && typeof window.themeFixUtils.fixAllStyling === 'function') {
                    console.log('Using theme-fix.js utilities to fix styling');
                    window.themeFixUtils.fixAllStyling();
                    
                    // Chạy lại một vài lần để đảm bảo mọi thứ được áp dụng đúng
                    setTimeout(() => window.themeFixUtils.fixAllStyling(), 200);
                    setTimeout(() => window.themeFixUtils.fixAllStyling(), 500);
                    setTimeout(() => window.themeFixUtils.fixAllStyling(), 1000);
                } else {
                    console.warn('Theme fix utilities not available, applying basic fixes...');
                    fixTagStyling();
                }
                
                // Đảm bảo grid layout được áp dụng đúng
                ensureGridLayout();
            }, 50);
            
            // Theo dõi và xử lý thay đổi theme
            const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                    if (mutation.attributeName === 'data-theme' || 
                        mutation.attributeName === 'data-bs-theme') {
                        console.log('Theme change detected in Index.cshtml');
                        
                        // Gọi hàm fix từ theme-fix.js nếu có
                        if (window.themeFixUtils) {
                            setTimeout(() => window.themeFixUtils.fixAllStyling(), 100);
                            setTimeout(() => window.themeFixUtils.fixAllStyling(), 500);
                        } else {
                            // Sử dụng hàm dự phòng
                            setTimeout(fixTagStyling, 100);
                        }
                    }
                });
            });
            
            // Kích hoạt observer
            observer.observe(document.documentElement, { attributes: true });
            
            // Đảm bảo grid layout được áp dụng
            function ensureGridLayout() {
                const container = document.querySelector('.tags-grid-container');
                if (!container) return;
                
                // Nếu container không có style grid
                if (getComputedStyle(container).display !== 'grid') {
                    console.log('Fixing grid layout from Index.cshtml script');
                    container.style.cssText = `
                        display: grid !important;
                        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)) !important;
                        gap: 1.5rem !important;
                        width: 100% !important;
                    `;
                    
                    // Kiểm tra xem card có hiển thị không
                    const cards = container.querySelectorAll('.tag-card');
                    let visibleCards = 0;
                    
                    cards.forEach(card => {
                        if (getComputedStyle(card).display !== 'none') visibleCards++;
                        
                        // Đảm bảo card có display và styles cơ bản
                        if (card.offsetHeight < 10 || getComputedStyle(card).display === 'none') {
                            card.style.display = 'flex';
                            card.style.flexDirection = 'column';
                            card.style.height = '100%';
                        }
                    });
                    
                    console.log(`Found ${visibleCards} visible cards out of ${cards.length}`);
                }
            }
            
            // Hàm backup để fix tag styling nếu không có themeFixUtils
            function fixTagStyling() {
                const isDarkTheme = document.documentElement.getAttribute('data-theme') === 'dark';
                console.log('Applying backup styling for theme:', isDarkTheme ? 'dark' : 'light');
                
                // Đảm bảo layout được ứng dụng
                ensureGridLayout();
                
                document.querySelectorAll('.tag-card').forEach(card => {
                    // Fix lỗi khiến thẻ tag không hiển thị
                    if (getComputedStyle(card).display === 'none' || !card.offsetHeight) {
                        console.log('Fixing hidden card');
                        card.style.display = 'flex';
                        card.style.flexDirection = 'column';
                        card.style.height = '100%';
                    }
                    
                    // Đảm bảo card có background và border đúng
                    if (isDarkTheme) {
                        card.style.background = '#2d3748';
                        card.style.borderColor = 'rgba(108, 92, 231, 0.2)';
                        card.style.boxShadow = '0 6px 15px rgba(0, 0, 0, 0.15)';
                    } else {
                        card.style.background = 'white';
                        card.style.borderColor = 'rgba(108, 92, 231, 0.05)';
                        card.style.boxShadow = '0 6px 15px rgba(0, 0, 0, 0.05)';
                    }
                    
                    // Thêm pseudo-element gradient ở trên cùng nếu cần
                    if (!card.querySelector('.tag-card-gradient')) {
                        const gradient = document.createElement('div');
                        gradient.className = 'tag-card-gradient';
                        gradient.style.position = 'absolute';
                        gradient.style.top = '0';
                        gradient.style.left = '0';
                        gradient.style.right = '0';
                        gradient.style.height = '6px';
                        gradient.style.background = 'linear-gradient(to right, #8e24aa, #e91e63)';
                        gradient.style.zIndex = '1';
                        card.prepend(gradient);
                    }
                });
                
                // Fix các phần tử trong card theo theme
                const elements = {
                    '.tag-description': {
                        dark: { color: '#e2e8f0', backgroundColor: '#374151' },
                        light: { color: '#4a5568', backgroundColor: '#f8f9fa' }
                    },
                    '.tag-badge': {
                        dark: { backgroundColor: 'rgba(187, 134, 252, 0.1)', color: '#bb86fc' },
                        light: { backgroundColor: 'rgba(142, 36, 170, 0.1)', color: '#8e24aa' }
                    },
                    '.tag-action-link.primary': {
                        dark: { backgroundColor: 'rgba(187, 134, 252, 0.1)', color: '#bb86fc' },
                        light: { backgroundColor: 'rgba(142, 36, 170, 0.1)', color: '#8e24aa' }
                    }
                };
                
                // Áp dụng styles cho từng phần tử
                Object.keys(elements).forEach(selector => {
                    document.querySelectorAll(selector).forEach(el => {
                        const styles = isDarkTheme ? elements[selector].dark : elements[selector].light;
                        Object.keys(styles).forEach(prop => {
                            el.style[prop] = styles[prop];
                        });
                    });
                });
            }
            
            // Kích hoạt fix khi người dùng tương tác với trang
            document.querySelector('.tags-container').addEventListener('click', function(e) {
                console.log('User interaction detected, triggering fixes');
                setTimeout(() => {
                    if (window.themeFixUtils) {
                        window.themeFixUtils.fixAllStyling();
                    } else {
                        fixTagStyling();
                    }
                }, 100);
            });
        });
    </script>
}