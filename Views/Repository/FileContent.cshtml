@model DoAnWeb.ViewModels.FileContentViewModel

@{
    ViewData["Title"] = Model.FileName;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <a href="http://localhost:3000/@Model.Owner/@Model.Repository" target="_blank" class="btn btn-outline-secondary me-2">
                <i class="bi bi-arrow-left"></i> Back to Repository
            </a>
            <span class="badge bg-light text-dark border">
                <i class="bi bi-file-earmark-code"></i> @Model.FilePath
            </span>
        </div>
        <div>
            <a href="http://localhost:3000/@Model.Owner/@Model.Repository/src/branch/main/@Model.FilePath" 
               target="_blank" class="btn btn-primary btn-sm">
                <i class="bi bi-pencil"></i> Edit in Gitea
            </a>
            <a href="http://localhost:3000/@Model.Owner/@Model.Repository/commits/branch/main/@Model.FilePath" 
               target="_blank" class="btn btn-outline-secondary btn-sm">
                <i class="bi bi-clock-history"></i> History
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center bg-light">
            <div>
                <i class="bi bi-file-earmark-text"></i> @Model.FileName
                <small class="text-muted ms-2">@Model.Size bytes</small>
            </div>
            <div>
                <button class="btn btn-sm btn-outline-secondary" onclick="copyContent()">
                    <i class="bi bi-clipboard"></i> Copy
                </button>
                <a href="@Model.HtmlUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-box-arrow-up-right"></i> View Raw
                </a>
            </div>
        </div>
        <div class="card-body p-0">
            @if (Model.Encoding == "base64")
            {
                <div id="file-content" class="p-3 overflow-auto" style="max-height: 500px; font-family: 'Consolas', monospace; white-space: pre-wrap;">@System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(Model.Content))</div>
            }
            else
            {
                <div id="file-content" class="p-3 overflow-auto" style="max-height: 500px; font-family: 'Consolas', monospace; white-space: pre-wrap;">@Model.Content</div>
            }
        </div>
    </div>
    
    <div class="card">
        <div class="card-header bg-light">
            <h5 class="mb-0">
                <i class="bi bi-info-circle"></i> File Information
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <ul class="list-unstyled">
                        <li><strong>File Path:</strong> @Model.FilePath</li>
                        <li><strong>Encoding:</strong> @Model.Encoding</li>
                        <li><strong>Repository:</strong> <a href="http://localhost:3000/@Model.Owner/@Model.Repository" target="_blank">@Model.Owner/@Model.Repository</a></li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <div class="alert alert-info mb-0">
                        <i class="bi bi-lightbulb-fill me-2"></i>
                        For full Git functionality including editing, committing changes, and viewing history, please use the Gitea interface or clone the repository locally.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function copyContent() {
            const content = document.getElementById('file-content').innerText;
            const tempInput = document.createElement('textarea');
            tempInput.value = content;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            
            alert('File content copied to clipboard!');
        }
        
        // Highlight syntax based on file extension
        document.addEventListener('DOMContentLoaded', function() {
            // This is a simple placeholder - in a real app you might want to use a library like highlight.js
            // to properly highlight syntax based on the file type
            const fileName = '@Model.FileName'.toLowerCase();
            const fileContent = document.getElementById('file-content');
            
            if (fileName.endsWith('.cs') || fileName.endsWith('.csharp')) {
                // Add a CSS class for C# syntax highlighting
                fileContent.classList.add('language-csharp');
            } else if (fileName.endsWith('.js')) {
                fileContent.classList.add('language-javascript');
            } else if (fileName.endsWith('.html') || fileName.endsWith('.cshtml') || fileName.endsWith('.razor')) {
                fileContent.classList.add('language-html');
            } else if (fileName.endsWith('.css')) {
                fileContent.classList.add('language-css');
            } else if (fileName.endsWith('.json')) {
                fileContent.classList.add('language-json');
            } else if (fileName.endsWith('.md')) {
                fileContent.classList.add('language-markdown');
            }
            
            // In a real app, you would initialize your syntax highlighter here
            // Example: hljs.highlightAll();
        });
    </script>
} 