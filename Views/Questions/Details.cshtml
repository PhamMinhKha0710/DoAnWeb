@model DoAnWeb.Models.Question

@{
    ViewData["Title"] = Model.Title;
}

@section Styles {
    <link rel="stylesheet" href="~/css/questions.css" />
    <link rel="stylesheet" href="~/css/questions-fix.css" />
    <link rel="stylesheet" href="~/css/code-blocks.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/lightbox2@2.11.3/dist/css/lightbox.min.css">
    <style>
        .attachment-preview {
            max-width: 100%;
            max-height: 300px;
            margin-bottom: 10px;
            border-radius: 4px;
            cursor: pointer;
        }
        .vote-button.active {
            background-color: var(--bs-primary);
            color: white;
        }
        .vote-button.active-downvote {
            background-color: var(--bs-danger);
            color: white;
        }
        
        /* Image preview styling */
        .image-preview {
            position: relative;
            margin-bottom: 10px;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .image-preview img {
            max-width: 100%;
            max-height: 200px;
            object-fit: contain;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .image-preview .remove-preview {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #dc3545;
            border: none;
        }
    </style>
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index" class="text-decoration-none">Home</a></li>
                    <li class="breadcrumb-item"><a asp-action="Index" class="text-decoration-none">Questions</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <!-- Question Card -->
            <div class="card mb-4 question-detail-card">
                <div class="card-header bg-transparent py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h1 class="card-title mb-0 fs-4 fw-bold">@Model.Title</h1>
                        @if (User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == Model.UserId.ToString())
                        {
                            <div>
                                <a asp-action="Edit" asp-route-id="@Model.QuestionId" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-pencil me-1"></i> Edit
                                </a>
                                <a asp-action="Delete" asp-route-id="@Model.QuestionId" class="btn btn-outline-danger btn-sm">
                                    <i class="bi bi-trash me-1"></i> Delete
                                </a>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <div class="question-stats d-flex gap-2">
                            <span class="badge bg-primary rounded-pill px-3 py-2">
                                <i class="bi bi-arrow-up-circle me-1"></i> @Model.Score votes
                            </span>
                            <span class="badge bg-secondary rounded-pill px-3 py-2">
                                <i class="bi bi-eye me-1"></i> <span class="view-count">@Model.ViewCount</span> views
                            </span>
                            <span class="badge bg-info rounded-pill px-3 py-2">
                                <i class="bi bi-info-circle me-1"></i> @Model.Status
                            </span>
                        </div>
                        <div class="question-dates">
                            <small class="text-muted">
                                <i class="bi bi-calendar3 me-1"></i> Asked on @(Model.CreatedDate.HasValue ? Model.CreatedDate.Value.ToString("MMM dd, yyyy") : "unknown")
                            </small>
                            @if (Model.UpdatedDate != Model.CreatedDate)
                            {
                                <small class="text-muted ms-2">
                                    <i class="bi bi-pencil-square me-1"></i> Updated on @Model.UpdatedDate?.ToString("MMM dd, yyyy")
                                </small>
                            }
                        </div>
                    </div>

                    <div class="question-body mb-4 content-area">
                        @Html.Raw(Model.Body)
                    </div>

                    <div class="mb-4">
                        @foreach (var tag in Model.Tags)
                        {
                            <a asp-action="Index" asp-route-tag="@tag.TagName" class="badge bg-light text-dark me-1 text-decoration-none">@tag.TagName</a>
                        }
                    </div>

                    @if (Model.Attachments != null && Model.Attachments.Any())
                    {
                        <div class="mb-4">
                            <h5 class="mb-2"><i class="bi bi-paperclip me-2"></i>Attachments</h5>
                            <div class="attachment-list">
                                @foreach (var attachment in Model.Attachments)
                                {
                                    <div class="attachment-item p-2 border rounded mb-2">
                                        @{
                                            string fileIcon = "bi-file-earmark";
                                            bool isImage = false;
                                            string[] imageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
                                            
                                            if (attachment.FileName.EndsWith(".pdf")) fileIcon = "bi-file-earmark-pdf";
                                            else if (attachment.FileName.EndsWith(".doc") || attachment.FileName.EndsWith(".docx")) fileIcon = "bi-file-earmark-word";
                                            else if (attachment.FileName.EndsWith(".zip") || attachment.FileName.EndsWith(".rar")) fileIcon = "bi-file-earmark-zip";
                                            else if (attachment.FileName.EndsWith(".txt")) fileIcon = "bi-file-earmark-text";
                                            else if (imageExtensions.Any(ext => attachment.FileName.ToLower().EndsWith(ext)))
                                            {
                                                fileIcon = "bi-file-earmark-image";
                                                isImage = true;
                                            }
                                        }
                                        
                                        @if (isImage)
                                        {
                                            <div class="text-center mb-2">
                                                <a href="@attachment.FilePath" data-lightbox="question-images" data-title="@attachment.FileName">
                                                    <img src="@attachment.FilePath" alt="@attachment.FileName" class="attachment-preview img-fluid" />
                                                </a>
                                            </div>
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div>
                                                    <i class="bi @fileIcon me-2 fs-5"></i>
                                                    <span class="fw-medium">@attachment.FileName</span>
                                                    <div class="text-muted small">@(attachment.FileSize / 1024) KB - @attachment.UploadDate.ToString("MMM dd, yyyy")</div>
                                                </div>
                                                <a href="@attachment.FilePath" class="btn btn-sm btn-outline-primary" download="@attachment.FileName">
                                                    <i class="bi bi-download me-1"></i> Download
                                                </a>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex align-items-center">
                                                <i class="bi @fileIcon me-2 fs-5"></i>
                                                <div class="flex-grow-1">
                                                    <div class="fw-medium">@attachment.FileName</div>
                                                    <div class="text-muted small">@(attachment.FileSize / 1024) KB - @attachment.UploadDate.ToString("MMM dd, yyyy")</div>
                                                </div>
                                                <a href="@attachment.FilePath" class="btn btn-sm btn-outline-primary" download="@attachment.FileName">
                                                    <i class="bi bi-download me-1"></i> Download
                                                </a>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <div class="card author-card bg-light border-0 mb-0">
                        <div class="card-body p-3">
                            <div class="d-flex">
                                <div class="flex-shrink-0">
                                    <div class="author-avatar rounded-circle d-flex align-items-center justify-content-center bg-primary text-white">
                                        @if (string.IsNullOrEmpty(Model.User?.AvatarUrl))
                                        {
                                            <i class="bi bi-person-fill fs-4"></i>
                                        }
                                        else
                                        {
                                            <img src="@Model.User.AvatarUrl" alt="@Model.User?.DisplayName" class="rounded-circle" width="50" height="50">
                                        }
                                    </div>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <h5 class="mt-0 mb-1 fw-bold">@Model.User?.DisplayName</h5>
                                    <p class="mb-0 text-muted">@Model.User?.Bio</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-footer bg-transparent py-3">
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success d-flex align-items-center mb-3">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            <div>@TempData["SuccessMessage"]</div>
                        </div>
                    }
                    
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger d-flex align-items-center mb-3">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <div>@TempData["ErrorMessage"]</div>
                        </div>
                    }
                    
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <div class="d-flex justify-content-between">
                            <div class="action-buttons">
                                @{
                                    bool hasUpvoted = Model.UserVoteType == "up";
                                    bool hasDownvoted = Model.UserVoteType == "down";
                                }
                                <form asp-action="Vote" method="post" class="d-inline vote-form">
                                    <input type="hidden" name="id" value="@Model.QuestionId" />
                                    <input type="hidden" name="voteType" value="@(hasUpvoted ? "remove" : "up")" class="vote-type-input" />
                                    <button type="submit" class="btn @(hasUpvoted ? "btn-primary" : "btn-outline-success") btn-sm vote-button @(hasUpvoted ? "active" : "")">
                                        <i class="bi @(hasUpvoted ? "bi-arrow-up-circle-fill" : "bi-arrow-up")"></i> @(hasUpvoted ? "Upvoted" : "Upvote")
                                    </button>
                                </form>
                                <form asp-action="Vote" method="post" class="d-inline vote-form">
                                    <input type="hidden" name="id" value="@Model.QuestionId" />
                                    <input type="hidden" name="voteType" value="@(hasDownvoted ? "remove" : "down")" class="vote-type-input" />
                                    <button type="submit" class="btn @(hasDownvoted ? "btn-danger" : "btn-outline-danger") btn-sm vote-button @(hasDownvoted ? "active-downvote" : "")">
                                        <i class="bi @(hasDownvoted ? "bi-arrow-down-circle-fill" : "bi-arrow-down")"></i> @(hasDownvoted ? "Downvoted" : "Downvote")
                                    </button>
                                </form>
                                <form asp-controller="SavedItems" asp-action="SaveQuestion" method="post" class="d-inline">
                                    <input type="hidden" name="id" value="@Model.QuestionId" />
                                    <button type="submit" class="btn btn-outline-primary btn-sm @(Model.IsSaved ? "saved" : "")" title="@(Model.IsSaved ? "Unsave this question" : "Save this question")">
                                        <i class="bi @(Model.IsSaved ? "bi-bookmark-check-fill" : "bi-bookmark")"></i> @(Model.IsSaved ? "Question saved" : "Save question")
                                    </button>
                                </form>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Answers Section -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3 class="fw-bold">Answers (@(Model.Answers?.Count() ?? 0))</h3>
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <a href="#answer-form" class="btn btn-primary btn-sm">
                        <i class="bi bi-pencil-square me-1"></i> Write an Answer
                    </a>
                }
            </div>
            
            <div class="answers-container">
                @if (Model.Answers != null && Model.Answers.Any())
                {
                    foreach (var answer in Model.Answers.OrderByDescending(a => a.IsAccepted).ThenByDescending(a => a.Score))
                    {
                        <div class="card mb-4 answer-card @(answer.IsAccepted ? "border-success" : "")">
                            @if (answer.IsAccepted)
                            {
                                <div class="accepted-banner bg-success text-white py-1 px-3">
                                    <i class="bi bi-check-circle-fill me-1"></i> Accepted Answer
                                </div>
                            }
                            <div class="card-body">
                                <div class="d-flex justify-content-between mb-3">
                                    <div class="vote-section d-flex gap-2">
                                        <span class="badge bg-secondary rounded-pill px-3 py-2">
                                            <i class="bi bi-arrow-up-circle me-1"></i> @answer.Score votes
                                        </span>
                                    </div>
                                    <small class="text-muted">
                                        <i class="bi bi-calendar3 me-1"></i> Answered on @(answer.CreatedDate.HasValue ? answer.CreatedDate.Value.ToString("MMM dd, yyyy") : "unknown")
                                    </small>
                                </div>
                                <div class="answer-content mt-3 content-area">
                                    @Html.Raw(answer.Body)
                                </div>
                                
                                @if (answer.Attachments != null && answer.Attachments.Any())
                                {
                                    <div class="mt-3 mb-3">
                                        <h6 class="mb-2"><i class="bi bi-image me-2"></i>Attachments</h6>
                                        <div class="attachment-list">
                                            @foreach (var attachment in answer.Attachments)
                                            {
                                                <div class="attachment-item p-2 border rounded mb-2">
                                                    @{
                                                        bool isImage = false;
                                                        string[] imageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
                                                        
                                                        isImage = imageExtensions.Any(ext => attachment.FileName.ToLower().EndsWith(ext));
                                                    }
                                                    
                                                    @if (isImage)
                                                    {
                                                        <div class="text-center mb-2">
                                                            <a href="@attachment.FilePath" data-lightbox="answer-@answer.AnswerId-images" data-title="@attachment.FileName">
                                                                <img src="@attachment.FilePath" alt="@attachment.FileName" class="attachment-preview img-fluid" />
                                                            </a>
                                                        </div>
                                                        <div class="d-flex align-items-center justify-content-between">
                                                            <div>
                                                                <i class="bi bi-file-earmark-image me-2 fs-5"></i>
                                                                <span class="fw-medium">@attachment.FileName</span>
                                                                <div class="text-muted small">@(attachment.FileSize / 1024) KB - @attachment.UploadDate.ToString("MMM dd, yyyy")</div>
                                                            </div>
                                                            <a href="@attachment.FilePath" class="btn btn-sm btn-outline-primary" download="@attachment.FileName">
                                                                <i class="bi bi-download me-1"></i> Download
                                                            </a>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="d-flex align-items-center">
                                                            <i class="bi bi-file-earmark me-2 fs-5"></i>
                                                            <div class="flex-grow-1">
                                                                <div class="fw-medium">@attachment.FileName</div>
                                                                <div class="text-muted small">@(attachment.FileSize / 1024) KB - @attachment.UploadDate.ToString("MMM dd, yyyy")</div>
                                                            </div>
                                                            <a href="@attachment.FilePath" class="btn btn-sm btn-outline-primary" download="@attachment.FileName">
                                                                <i class="bi bi-download me-1"></i> Download
                                                            </a>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                <div class="answer-footer mt-4">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="user-info d-flex align-items-center">
                                            <div class="avatar me-2">
                                                <i class="bi bi-person-circle"></i>
                                            </div>
                                            <small class="text-muted">Answered by <a href="#" class="text-decoration-none">@(answer.User?.DisplayName ?? "Unknown")</a></small>
                                        </div>
                                        @if (User.Identity?.IsAuthenticated == true)
                                        {
                                            <div class="action-buttons">
                                                @{
                                                    bool hasUpvotedAnswer = answer.UserVoteType == "up";
                                                    bool hasDownvotedAnswer = answer.UserVoteType == "down";
                                                }
                                                <form asp-action="VoteAnswer" method="post" class="d-inline vote-form">
                                                    <input type="hidden" name="answerId" value="@answer.AnswerId" />
                                                    <input type="hidden" name="questionId" value="@Model.QuestionId" />
                                                    <input type="hidden" name="voteType" value="@(hasUpvotedAnswer ? "remove" : "up")" class="vote-type-input" />
                                                    <button type="submit" class="btn @(hasUpvotedAnswer ? "btn-primary" : "btn-outline-success") btn-sm vote-button @(hasUpvotedAnswer ? "active" : "")">
                                                        <i class="bi @(hasUpvotedAnswer ? "bi-arrow-up-circle-fill" : "bi-arrow-up")"></i> @(hasUpvotedAnswer ? "Upvoted" : "Upvote")
                                                    </button>
                                                </form>
                                                <form asp-action="VoteAnswer" method="post" class="d-inline vote-form">
                                                    <input type="hidden" name="answerId" value="@answer.AnswerId" />
                                                    <input type="hidden" name="questionId" value="@Model.QuestionId" />
                                                    <input type="hidden" name="voteType" value="@(hasDownvotedAnswer ? "remove" : "down")" class="vote-type-input" />
                                                    <button type="submit" class="btn @(hasDownvotedAnswer ? "btn-danger" : "btn-outline-danger") btn-sm vote-button @(hasDownvotedAnswer ? "active-downvote" : "")">
                                                        <i class="bi @(hasDownvotedAnswer ? "bi-arrow-down-circle-fill" : "bi-arrow-down")"></i> @(hasDownvotedAnswer ? "Downvoted" : "Downvote")
                                                    </button>
                                                </form>
                                                <form asp-controller="SavedItems" asp-action="SaveAnswer" method="post" class="d-inline">
                                                    <input type="hidden" name="id" value="@answer.AnswerId" />
                                                    <button type="submit" class="btn btn-outline-primary btn-sm @(answer.IsSaved ? "saved" : "")" title="@(answer.IsSaved ? "Unsave this answer" : "Save this answer")">
                                                        <i class="bi @(answer.IsSaved ? "bi-bookmark-check-fill" : "bi-bookmark")"></i> @(answer.IsSaved ? "Answer saved" : "Save answer")
                                                    </button>
                                                </form>
                                                @if (User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == Model.UserId.ToString() && !answer.IsAccepted)
                                                {
                                                    <form asp-action="AcceptAnswer" method="post" class="d-inline">
                                                        <input type="hidden" name="answerId" value="@answer.AnswerId" />
                                                        <input type="hidden" name="questionId" value="@Model.QuestionId" />
                                                        <button type="submit" class="btn btn-outline-success btn-sm">
                                                            <i class="bi bi-check-circle"></i> Accept
                                                        </button>
                                                    </form>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state text-center py-5">
                        <i class="bi bi-chat-square-text display-1 text-muted mb-3"></i>
                        <h4>No Answers Yet</h4>
                        <p class="text-muted">Be the first to answer this question!</p>
                    </div>
                }
            </div>

            <!-- Answer Form -->
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div class="card mt-5" id="answer-form">
                    <div class="card-header bg-transparent py-3">
                        <h4 class="mb-0">Your Answer</h4>
                    </div>
                    <div class="card-body">
                        <form asp-action="Answer" method="post" enctype="multipart/form-data">
                            <input type="hidden" name="questionId" value="@Model.QuestionId" />
                            <div class="mb-3">
                                <div class="markdown-editor-container">
                                    <div class="markdown-toolbar mb-2">
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-sm btn-outline-secondary" data-markdown="**Bold**"><i class="bi bi-type-bold"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" data-markdown="*Italic*"><i class="bi bi-type-italic"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" data-markdown="# Heading"><i class="bi bi-type-h1"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" data-markdown="[Link](url)"><i class="bi bi-link"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" data-markdown="![Image](url)"><i class="bi bi-image"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" data-markdown="`Code`"><i class="bi bi-code"></i></button>
                                        </div>
                                    </div>
                                    <textarea name="Body" class="form-control markdown-editor" rows="6" placeholder="Write your answer here..."></textarea>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-medium">Attachments</label>
                                <input type="file" name="AnswerAttachments" class="form-control" multiple id="answer-attachments" />
                                <div class="form-text">
                                    <i class="bi bi-image me-1"></i> Supported formats: JPG, JPEG, PNG, GIF, BMP, WEBP (Max 5MB per file)
                                </div>
                                
                                <!-- Answer Image Preview Container -->
                                <div id="answer-image-preview-container" class="mt-3 row g-2">
                                    <!-- Preview images will be inserted here by JavaScript -->
                                </div>
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-send"></i> Post Answer
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
    <!-- SignalR core library -->
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    
    <!-- View Counter Script -->
    <script src="~/js/view-counter.js"></script>
    
    <!-- Markdown parser library -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    
    <!-- Prism.js for syntax highlighting -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css">
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-csharp.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-css.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-sql.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-java.min.js"></script>
    
    <!-- Lightbox for image viewing -->
    <script src="https://cdn.jsdelivr.net/npm/lightbox2@2.11.3/dist/js/lightbox.min.js"></script>
    
    <!-- Custom Markdown editor implementation -->
    <script src="~/js/markdown-editor.js"></script>
    
    <!-- Attachment viewer script -->
    <script src="~/js/attachment-viewer.js"></script>
    
    <!-- Answer attachments script -->
    <script src="~/js/answer-attachments.js"></script>
    
    <!-- Question notification handler for real-time updates -->
    <script src="~/js/question-notification-handler.js"></script>
    
    <!-- Image preview script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Prism for syntax highlighting
            if (typeof Prism !== 'undefined') {
                Prism.highlightAll();
            }
            
            // Initialize lightbox
            lightbox.option({
                'resizeDuration': 200,
                'wrapAround': true,
                'albumLabel': 'Image %1 of %2'
            });
            
            // Setup for question attachments preview
            setupImagePreview('file-upload', 'image-preview-container');
            
            // Setup for answer attachments preview
            setupImagePreview('answer-attachments', 'answer-image-preview-container');
            
            // Khởi tạo tính năng đếm lượt xem
            if (window.ViewCounter) {
                ViewCounter.init(@Model.QuestionId);
            }
            
            // Function to handle image preview for both question and answer attachments
            function setupImagePreview(inputId, containerId) {
                const fileUpload = document.getElementById(inputId);
                const previewContainer = document.getElementById(containerId);
                
                if (!fileUpload || !previewContainer) return;
                
                // Handle file selection
                fileUpload.addEventListener('change', function() {
                    // Clear previous previews
                    previewContainer.innerHTML = '';
                    
                    // Process each selected file
                    Array.from(this.files).forEach((file, index) => {
                        // Check if file is an image
                        if (file.type.startsWith('image/')) {
                            // Create preview element
                            const previewCol = document.createElement('div');
                            previewCol.className = 'col-md-4 col-sm-6';
                            
                            const previewDiv = document.createElement('div');
                            previewDiv.className = 'image-preview';
                            
                            // Create image element
                            const img = document.createElement('img');
                            img.alt = file.name;
                            
                            // Create remove button
                            const removeBtn = document.createElement('button');
                            removeBtn.className = 'remove-preview';
                            removeBtn.innerHTML = '<i class="bi bi-x"></i>';
                            removeBtn.type = 'button';
                            removeBtn.dataset.index = index;
                            removeBtn.addEventListener('click', function() {
                                previewCol.remove();
                                
                                // Create a notification about removal
                                const notification = document.createElement('div');
                                notification.className = 'alert alert-info mt-2';
                                notification.textContent = `${file.name} will be removed when you submit the form`;
                                previewContainer.appendChild(notification);
                                
                                setTimeout(() => {
                                    notification.remove();
                                }, 3000);
                            });
                            
                            // Read the file and set the image source
                            const reader = new FileReader();
                            reader.onload = function(e) {
                                img.src = e.target.result;
                            };
                            reader.readAsDataURL(file);
                            
                            // Add elements to the DOM
                            previewDiv.appendChild(img);
                            previewDiv.appendChild(removeBtn);
                            previewCol.appendChild(previewDiv);
                            previewContainer.appendChild(previewCol);
                        }
                    });
                });
            }
        });
    </script>
}
